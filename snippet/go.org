#+TITLE:      Go code snippet collection

* 目录                                                    :TOC_4_gh:noexport:
- [[#open-opens-the-specified-url-in-the-default-browser-of-the-user][Open opens the specified URL in the default browser of the user]]
- [[#determine-whether-a-file-exists][Determine whether a file exists]]
- [[#provide-interfaces-to-modify-the-default-configuration][Provide interfaces to modify the default configuration]]
- [[#regular-match][Regular match]]
- [[#slice-chunking][Slice chunking]]
- [[#generic-trick][Generic trick]]
- [[#generate-a-random-string-of-a-fixed-length][Generate a random string of a fixed length]]

* Open opens the specified URL in the default browser of the user
  #+begin_src go
    func Open(url string) error {
      var cmd string
      var args []string

      switch runtime.GOOS {
      case "windows":
        cmd = "cmd"
        args = []string{"/c", "start"}
      case "darwin":
        cmd = "open"
      default: // "linux", "freebsd", "openbsd", "netbsd"
        cmd = "xdg-open"
      }
      args = append(args, url)
      return exec.Command(cmd, args...).Start()
    }
  #+end_src

* Determine whether a file exists
  #+begin_src go
    func IsExist(path string) bool {
      _, err := os.Lstat(path)
      return !os.IsNotExist(err)
    }
  #+end_src

* Provide interfaces to modify the default configuration
  #+begin_src go
    type Option func(cfg *Config) error

    type Config struct {}

    func WithOption(val string) Option {
      return func(cfg *Config) error {
        return nil
      }
    }

    func New(options ...Option) *Config {
      cfg := &Config{}
      for _, option := range options {
        if err := option(cfg); err != nil {
          panic(err)
        }
      }
      return cfg
    }
  #+end_src

* Regular match
  #+begin_src go
    type Match struct {
      Matched   string
      Group     int
      GroupName string
    }

    func Scanner(pattern, text string) []*Match {
      reg := regexp.MustCompile(pattern)

      res := make([]*Match, 0)
      grp := reg.SubexpNames()

      for _, matched := range reg.FindAllStringSubmatch(text, -1) {
        for i, match := range matched {
          if i > 0 && match != "" {
            res = append(res, &Match{Matched: match, Group: i, GroupName: grp[i]})
          }
        }
      }

      return res
    }
  #+end_src

  Example:
  #+begin_src go
    matches := Scanner(`(?P<NAME>[a-zA-Z_][a-zA-Z_0-9]*)|(?P<NUM>\d+)|(?P<EQ>=)|(?P<WS>\s+)`, "num = 10")
    bytes, _ := json.Marshal(matches)
    fmt.Println(string(bytes))
  #+end_src

  Result:
  #+begin_example
    [{"Matched":"num","Group":1,"GroupName":"NAME"},{"Matched":" ","Group":4,"GroupName":"WS"},{"Matched":"=","Group":3,"GroupName":"EQ"},{"Matched":" ","Group":4,"GroupName":"WS"},{"Matched":"10","Group":2,"GroupName":"NUM"}]
  #+end_example

* Slice chunking
  #+begin_src go
    func chunk(slice []string, size int) [][]string {
      var result = make([][]string, 0, len(slice) / size)

      for i := 0; i < len(slice); i += size {
        end := i + size

        if end > len(slice) {
          end = len(slice)
        }

        result = append(result, slice[i:end])
      }

      return result
    }
  #+end_src

  Ref: [[https://stackoverflow.com/questions/35179656/slice-chunking-in-go][Slice chunking in Go - Stack Overflow]]

* Generic trick
  #+begin_src go
    package main

    import "fmt"

    type Event[T any] struct {
      Payload T
    }

    type Callback[T any] func(Event[T])

    var (
      registry = make(map[string]Callback[any])
    )

    func Register[T any](ev string, cb Callback[T]) {
      registerAny(ev, func(e Event[any]) {
        cb(Event[T]{
          Payload: e.Payload.(T),
        })
      })
    }

    func registerAny(ev string, cb Callback[any]) {
      registry[ev] = cb
    }

    func main() {
      Register("tick", func(e Event[int]) { fmt.Printf("%d", e.Payload) })
    }

  #+end_src


* Generate a random string of a fixed length
  #+begin_src go
    const letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    const (
        letterIdxBits = 6                    // 6 bits to represent a letter index
        letterIdxMask = 1<<letterIdxBits - 1 // All 1-bits, as many as letterIdxBits
        letterIdxMax  = 63 / letterIdxBits   // # of letter indices fitting in 63 bits
    )

    var src = rand.NewSource(time.Now().UnixNano())

    func RandStringBytesMaskImprSrcUnsafe(n int) string {
        b := make([]byte, n)
        // A src.Int63() generates 63 random bits, enough for letterIdxMax characters!
        for i, cache, remain := n-1, src.Int63(), letterIdxMax; i >= 0; {
            if remain == 0 {
                cache, remain = src.Int63(), letterIdxMax
            }
            if idx := int(cache & letterIdxMask); idx < len(letterBytes) {
                b[i] = letterBytes[idx]
                i--
            }
            cache >>= letterIdxBits
            remain--
        }

        return *(*string)(unsafe.Pointer(&b))
    }
  #+end_src

  Ref [[https://stackoverflow.com/questions/22892120/how-to-generate-a-random-string-of-a-fixed-length-in-go][How to generate a random string of a fixed length in Go? - Stack Overflow]]
