#+TITLE: Java code snippet collection

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#file-operation-related][File operation related]]
- [[#text-operation-related][Text operation related]]
- [[#array-operation-related][Array operation related]]
- [[#misc][Misc]]

* File operation related
  + Read all the contents of the file.
    #+BEGIN_SRC java
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;

      public static String readAll(String filename, String charsetName) throws IOException {
        return new String(Files.readAllBytes(Paths.get(filename)), charsetName);
      }
    #+END_SRC

  + Write all the contents to the file.
    #+BEGIN_SRC java
      import java.io.IOException;
      import java.nio.file.Files;
      import java.nio.file.Paths;

      public static void writeAll(String filename, String charsetName, String content)
          throws IOException {
        Files.write(Path.get(filename), content.getBytes(charsetName));
      }
    #+END_SRC

  + Expand environment variables in the path.
    #+BEGIN_SRC java
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;

      public static String expandvars(String path) {
        String result = new String(path);

        Pattern pt = Pattern.compile("\\$\\{(\\w+)\\}");
        Matcher match = pt.matcher(path);

        while (match.find()) {
          String var = match.group(1);
          String val = System.getenv(var);
          if (val != null) {
            result = result.replace("${" + var + "}", val);
          }
        }

        return result;
      }
    #+END_SRC

    Use like this:
    #+BEGIN_SRC java
      String path = expandvars("${HOME}/.cache");
    #+END_SRC

* Text operation related
  + Regular match all results
    #+BEGIN_SRC java
      import java.util.ArrayList;
      import java.util.List;
      import java.util.regex.Matcher;
      import java.util.regex.Pattern;

      public static List<String> findAll(Pattern pattern, String content) {
        List<String> result = new ArrayList<>();

        Matcher matcher = pattern.matcher(content);

        while (matcher.find()) {
          result.add(matcher.group());
        }

        return result;
      }
    #+END_SRC

* Array operation related
  + Conveniently convert arrays of primitive types and wrapper classes types
    #+BEGIN_SRC java
      import java.lang.reflect.Array;

      /**
       ,* Conveniently convert arrays of primitive types and wrapper classes types.
       ,*
       ,* Use like:
       ,*     Integer[] integerArr = (Integer[]) arrayConvert(new int[] {1, 2, 3}, Integer.class);
       ,*     int[] intArr = (int[]) arrayConvert(new Integer[] {1, 2, 3}, int.class);
       ,*
       ,* @param array The array to be converted
       ,* @param The type to be converted to
       ,* @result Converted array
       ,*/
      public static Object arrayConvert(Object array, Class<?> clazz) {
        Object newArray = Array.newInstance(clazz, Array.getLength(array));

        for (int i = 0; i < Array.getLength(array); ++i) {
          Array.set(newArray, i, Array.get(array, i));
        }

        return newArray;
      }
    #+END_SRC

* Misc
  + Similar to the as operation in CSharp.
    #+BEGIN_SRC java
      public static <T> T as(Class<T> clazz, Object o){
        if(clazz.isInstance(o)){
          return clazz.cast(o);
        }
        return null;
      }
    #+END_SRC
  
