#+TITLE: C code snippet collection

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#intheger-calculation-correlation][Intheger calculation correlation]]
- [[#pointer-operation-related][Pointer operation related]]
- [[#floating-point-operation][Floating point operation]]

* Intheger calculation correlation
  + Judging whether an unsigned add operation overflows.
    #+BEGIN_SRC C
      bool uint_add_is_overflow(unsigned x, unsigned y) {
        unsigned u_max = ~0u;
        return (x + y) < x;
      }
    #+END_SRC

  + Judging whether signed addition is overflowing.
    #+BEGIN_SRC C
      bool int_add_is_overflow(int x, int y) {
        if (x > 0 && y > 0) {
          return (x + y) <= 0;
        }

        if (x < 0 && y < 0) {
          return (x + y) >= 0;
        }

        return false;
      }
    #+END_SRC

  + Divide by the power of two, result rounded down.
    #+BEGIN_SRC C
      int divide_by_power_of_two(int x, int power, bool round_up) {
        return res = x >> power;
      }
    #+END_SRC

  + Divide by the power of two, result rounded up.
    #+BEGIN_SRC C
      int divide_by_power_of_two(int x, int power, bool round_up) {
        return res = (x + (1 << power) - 1) >> power;
      }
    #+END_SRC

  + Make the size a multiple of 4.
    #+BEGIN_SRC C
      size_t alingn4(size_t size) {
        if (size & 0x3 == 0) {
          return size;
        }
        return ((size >> 2) + 1) << 2;
      }
    #+END_SRC

  + Make the size a multiple of 8.
    #+BEGIN_SRC C
      size_t align8(size_t size) {
        if (size & 0x7 == 0) {
          return size;
        }
        return ((size >> 3) + 1) << 3;
      }
    #+END_SRC

* Pointer operation related
  + Get the byte distribution of the specified variable in memory.
    #+BEGIN_SRC C
      typedef unsigned char* byte_pointer;

      void show_bytes(byte_pointer start, size_t len) {
        for (size_t i = 0; i < len; ++i) {
          printf("%p %.2x\n", &start[i], start[i]);
        }
      }
    #+END_SRC

    Use like this:
    #+BEGIN_SRC C
      int main(int argc, char* argv[]) {
        int i_num = 0x01234567;
        float f_num = 0x01234567f;

        printf("%p\n", &i_num);
        show_bytes((byte_pointer)&i_num, sizeof(int));

        printf("%p\n", &f_num);
        show_bytes((byte_pointer)&f_num, sizeof(float));

        return 0;
      }
    #+END_SRC

* Floating point operation
  + Rounding to the specified number of digits.
    #+BEGIN_SRC C
      #include <math.h>

      double copysign(double x, double y) {
        if (y > 0. || (y == 0. && atan2(y, -1.) > 0.)) {
          return fabs(x);
        } else {
          return -fabs(x);
        }
      }

      double round(double x) {
        double absx, y;
        absx = fabs(x);
        y = floor(absx);
        if (absx - y >= 0.5) {
          y += 1.0;
        }
        return copysign(y, x);
      }
    #+END_SRC

  + Get the binary form of a floating point number.
    #+BEGIN_SRC C
      unsigned float2binary(float x) {
        return ((unsigned*)&x)[0];
      }
    #+END_SRC
