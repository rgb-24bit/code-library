#+TITLE: Elisp code snippet collection

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#file-operation-related][File operation related]]
- [[#date-time-operation-related][Date time operation related]]
- [[#text-operation-related][Text operation related]]
- [[#utility-function][Utility function]]

* File operation related
  + Read the text of the specified file
    #+BEGIN_SRC elisp
      (defun read-text-from-file (file-name &optional CODING-SYSTEM)
        "Read the text of the specified file."
        (setq CODING-SYSTEM (or CODING-SYSTEM 'utf-8))
        (with-temp-buffer
          (insert-file-contents-literally file-name)
          (decode-coding-region (point-min) (point-max) CODING-SYSTEM t)))
    #+END_SRC

  + Write the text to the specified file
    #+BEGIN_SRC elisp
      (defun write-text-to-file (file-name contents &optional CODING-SYSTEM)
        "Write the text to the specified file."
        (setq CODING-SYSTEM (or CODING-SYSTEM 'utf-8))
        (let ((coding-system-for-write 'binary))
          (with-temp-file file-name
            (set-buffer-multibyte nil)
            (insert (encode-coding-string contents CODING-SYSTEM)))))
    #+END_SRC

* Date time operation related
  + Insert datetime in the cursor
    #+BEGIN_SRC elisp
      (defun insert-datetime ()
        "Insert datetime in the cursor."
        (interactive)
        (insert (format-time-string "%Y-%m-%d %l:%M:%S")))
    #+END_SRC

* Text operation related
  + Full-width and half-width character conversion
    #+BEGIN_SRC elisp
      (define-translation-table 'fullwidth-to-halfwidth
        (let ((table (make-char-table 'translation-table)))
          (cl-loop for fullwidth from #xFF01 to #xFF5E
                   for halfwidth from #x21 to #x7E
                   do (aset table fullwidth halfwidth))
          table))

      (define-translation-table 'halfwidth-to-fullwidth
        (let ((table (make-char-table 'translation-table)))
          (cl-loop for fullwidth from #xFF01 to #xFF5E
                   for halfwidth from #x21 to #x7E
                   do (aset table halfwidth fullwidth))
          table))
    #+END_SRC

* Utility function
  + Rotate switching execution function
    #+BEGIN_SRC elisp
      (defun make-toggle-function (name &rest funs)
        (lexical-let ((function-name name)
                      (functions funs))
          (defalias name
            (function
             (lambda ()
               (interactive)
               (let* ((index (mod (1+ (or (get function-name 'index) -1)) (length functions)))
                      (next-function (nth index functions)))
                 (call-interactively next-function)
                 (put function-name 'index index)))))))
    #+END_SRC

    Use like this:
    #+BEGIN_SRC elisp
      (make-toggle-function
       'outline-cycle
       'outline-hide-leaves 'outline-hide-subtree 'outline-show-children 'outline-show-subtree)
    #+END_SRC

