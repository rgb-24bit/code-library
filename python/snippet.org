#+TITLE: Code snippet collection

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#file-operation-related][File operation related]]
- [[#io-related][I/O related]]
- [[#string-operation-related][String operation related]]

* File operation related
  + Create the file if the specified file does not exist.
    #+BEGIN_SRC python
      def make_file(path):
          """Create the file if the specified file does not exist."""
          if os.path.isfile(path):
              return

          dirname = os.path.dirname(path)
          if not os.path.isdir(dirname):
              os.makedirs(dirname)

          with open(path, 'w+') as fp:
              pass
    #+END_SRC

    Dependency: ~os~.

  + Capture the func's stdout.
    #+BEGIN_SRC python
      def capture_stdout(func):
          """Capture the func's stdout."""
          @functools.wraps(func)
          def wrapper(*args, **kwargs):
              new_out, old_out = StringIO(), sys.stdout
              sys.stdout = new_out
              try:
                  func(*args, **kwargs)
              finally:
                  sys.stdout = old_out
              return new_out.getvalue()
          return wrapper
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      @capture_stdout
      def func(name):
          print('Hello %s' % name)

      out = func('alice')  # Hello alice
    #+END_SRC
    
    Dependency: ~functools~, ~StringIO~ and ~sys~

* I/O related
  + A wrapper of the input and output streams.
    #+BEGIN_SRC python
      def _wrap_reader_for_text(fp, encoding):
          if isinstance(fp.read(0), bytes):
              fp = io.TextIOWrapper(io.BufferedReader(fp), encoding)
          return fp


      def _wrap_writer_for_text(fp, encoding):
          try:
              fp.write('')
          except TypeError:
              fp = io.TextIOWrapper(fp, encoding)
          return fp
    #+END_SRC

    Dependency: ~io~

* String operation related
  + Try converting a string to an integer.
    #+BEGIN_SRC python
      def intget(integer, base=10, default=None):
          """Try convert str to int. Failed to return to default."""
          try:
              return int(integer, base=base)
          except (TypeError, ValueError):
              return default
    #+END_SRC

  + Remove non-numeric characters.
    #+BEGIN_SRC python
      def numify(string):
          """Remover non-numeric characters."""
          return ''.join([c for c in str(string) if c.isdigit()])
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> numify('afxv2434gsd3534')
      '24343534'
    #+END_SRC

  + Replace string like pattern.
    #+BEGIN_SRC python
      def denumify(string, pattern):
          """Replace string like pattern."""
          istr, out = iter(string), list()
          for c in pattern:
              if c == 'X':
                  out.append(next(istr))
              else:
                  out.append(c)
          return ''.join(out)
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> denumify('8881011022', '(XXX) XXX-XXXX')
      '(888) 101-1022'
    #+END_SRC

  + Format ordinal indicator.
    #+BEGIN_SRC python
      def nthstr(n):
          """Format ordinal indicator."""
          assert n >= 0

          if n % 100 in [11, 12, 13]:
              return '%sth' % n

          return {1: '%sst', 2: '%snd', 3: '%srd'}.get(n % 10, '%sth') % n
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> [nthstr(x) for x in [2, 3, 4, 5, 10, 11, 12, 13, 14, 15]]
      ['2nd', '3rd', '4th', '5th', '10th', '11th', '12th', '13th', '14th', '15th']
    #+END_SRC

  + Single-byte multibyte character conversion.
    #+BEGIN_SRC python
      def convert_single(data, encoding='utf-8'):
          """Convert a string to the corresponding single-byte character
          set representation.
          """
          return data.encode(encoding).decode('latin-1')


      def convert_multi(data, encoding='utf-8'):
          """Convert a string to the corresponding multibyte character
          set representation.
          """
          return data.encode('latin-1').decode(encoding)
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> multi_str = '测试字符串A'
      >>> single_str = convert_single(multi_str)
      >>> single_str
      'æµ\x8bè¯\x95å\xad\x97ç¬¦ä¸²A'
      >>> convert_multi(single_str)
      '测试字符串A'
    #+END_SRC

