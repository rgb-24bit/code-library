#+TITLE: Code snippet collection

* Table of Contents                                       :TOC_4_gh:noexport:
- [[#file-operation-related][File operation related]]
- [[#io-related][I/O related]]
- [[#string-operation-related][String operation related]]
- [[#sequence-operation-related][Sequence operation related]]
- [[#dictionary-operation-related][Dictionary operation related]]
- [[#misc][Misc]]

* File operation related
  + Create the file if the specified file does not exist.
    #+BEGIN_SRC python
      import os

      def makefile(path):
          """Create the file if the specified file does not exist."""
          if os.path.isfile(path):
              return

          dirname = os.path.dirname(path)
          if not os.path.isdir(dirname):
              os.makedirs(dirname)

          open(path, 'w').close()
    #+END_SRC

  + Get the file that meets the rules in the specified directory.
    #+BEGIN_SRC python
      def directory_files(src, match=None):
          """Get the file that meets the rules in the specified directory."""
          match = match or (lambda x: True)

          names = os.listdir(src)

          for name in names:
              if not match(name):
                  continue

              srcname = os.path.join(src, name)
              if os.path.isdir(srcname):
                  for fn in directory_files(srcname, match):
                      yield fn
              else:
                  yield srcname
    #+END_SRC
  
  + Capture the func's stdout.
    #+BEGIN_SRC python
      import functools, StringIO, sys

      def capture_stdout(func):
          """Capture the func's stdout."""
          @functools.wraps(func)
          def wrapper(*args, **kwargs):
              new_out, old_out = StringIO(), sys.stdout
              sys.stdout = new_out
              try:
                  func(*args, **kwargs)
              finally:
                  sys.stdout = old_out
              return new_out.getvalue()
          return wrapper
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      @capture_stdout
      def func(name):
          print('Hello %s' % name)

      out = func('alice')  # Hello alice
    #+END_SRC
    
  + Memory mapped file.
    #+BEGIN_SRC python
      import os, mmap

      def memory_map(filename, access=mmap.ACCESS_WRITE):
          size = os.path.getsize(filename)
          fd = os.open(filename, os.O_RDWR)
          return mmap.mmap(fd, size, access=access)
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      with open('data') as m:
          ...
    #+END_SRC

    See more: [[https://docs.python.org/3/library/mmap.html][mmap — Memory-mapped file support]].

* I/O related
  + A wrapper of the input and output streams.
    #+BEGIN_SRC python
      import io

      def _wrap_reader_for_text(fp, encoding):
          if isinstance(fp.read(0), bytes):
              fp = io.TextIOWrapper(io.BufferedReader(fp), encoding)
          return fp


      def _wrap_writer_for_text(fp, encoding):
          try:
              fp.write('')
          except TypeError:
              fp = io.TextIOWrapper(fp, encoding)
          return fp
    #+END_SRC

* String operation related
  + Try converting a string to an integer.
    #+BEGIN_SRC python
      def intget(integer, base=10, default=None):
          """Try convert str to int. Failed to return to default."""
          try:
              return int(integer, base=base)
          except (TypeError, ValueError):
              return default
    #+END_SRC

  + Remove non-numeric characters.
    #+BEGIN_SRC python
      def numify(string):
          """Remover non-numeric characters."""
          return ''.join([c for c in str(string) if c.isdigit()])
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> numify('afxv2434gsd3534')
      '24343534'
    #+END_SRC

  + Replace string like pattern.
    #+BEGIN_SRC python
      def denumify(string, pattern):
          """Replace string like pattern."""
          istr, out = iter(string), list()
          for c in pattern:
              if c == 'X':
                  out.append(next(istr))
              else:
                  out.append(c)
          return ''.join(out)
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> denumify('8881011022', '(XXX) XXX-XXXX')
      '(888) 101-1022'
    #+END_SRC

  + Format ordinal indicator.
    #+BEGIN_SRC python
      def nthstr(n):
          """Format ordinal indicator."""
          assert n >= 0

          if n % 100 in [11, 12, 13]:
              return '%sth' % n

          return {1: '%sst', 2: '%snd', 3: '%srd'}.get(n % 10, '%sth') % n
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> [nthstr(x) for x in [2, 3, 4, 5, 10, 11, 12, 13, 14, 15]]
      ['2nd', '3rd', '4th', '5th', '10th', '11th', '12th', '13th', '14th', '15th']
    #+END_SRC

  + Single-byte multibyte character conversion.
    #+BEGIN_SRC python
      def convert_single(data, encoding='utf-8'):
          """Convert a string to the corresponding single-byte character
          set representation.
          """
          return data.encode(encoding).decode('latin-1')


      def convert_multi(data, encoding='utf-8'):
          """Convert a string to the corresponding multibyte character
          set representation.
          """
          return data.encode('latin-1').decode(encoding)
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> multi_str = '测试字符串A'
      >>> single_str = convert_single(multi_str)
      >>> single_str
      'æµ\x8bè¯\x95å\xad\x97ç¬¦ä¸²A'
      >>> convert_multi(single_str)
      '测试字符串A'
    #+END_SRC

* Sequence operation related
  + Group seq by a specified size.
    #+BEGIN_SRC python
      def group(seq, size):
          """Group the seq by size."""
          def take(seq, n):
              for i in range(n):
                  yield next(seq)

          seq = iter(seq)
          while True:
              x = list(take(seq, size))
              if x:
                  yield x
              else:
                  break
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> list(group([1, 2, 3, 4, 5, 6, 7], 2))
      [[1, 2], [3, 4], [5, 6], [7]]
    #+END_SRC

  + Sequence deduplication while maintaining the original order.
    #+BEGIN_SRC python
      def uniq(seq, key=None):
          """Sequence deduplication."""
          key = key or (lambda x: x)
          seen, result = set(), list()
          for v in seq:
              k = key(v)
              if k in seen:
                  continue
              seen.add(k)
              result.append(v)
          return result
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> uniq([1,1,3,4,5,3,4])
      [1, 3, 4, 5]
    #+END_SRC

  + Get the element at the specified position in the list,
    does not exist to return the default value.
    #+BEGIN_SRC python
      def listget(lst, inx, default=None):
          """Get the lst[inx], return to default if it does not exist."""
          if (len(lst) - 1 < inx) or (-len(lst) > inx):
              return default
          return lst[inx]
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> listget([1, 2, 3], 4, 5)
      5
    #+END_SRC

  + Traversing nested sequences。
    #+BEGIN_SRC python
      import collections.Iterable

      def flatten(items, ignore_types=(str, bytes)):
          for x in items:
              if isinstance(x, Iterable) and not isinstance(x, ignore_types):
                  yield from flatten(x)
              else:
                  yield x
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      items = [1, 2, [3, 4, [5, 6], 7], 8]
      # Produces 1 2 3 4 5 6 7 8
      for x in flatten(items):
          print(x)
    #+END_SRC

* Dictionary operation related
  + Reverse dictionary key-value mapping.
    #+BEGIN_SRC python
      def dictreverse(mapping):
          """reverse dict key and value."""
          return {value: key for key, value in mapping.items()}
    #+END_SRC

  + Find the key of the specified element.
    #+BEGIN_SRC python
      def dictfind(dictionary, element):
          """find the key's value is elemet"""
          for key, value in dictionary.items():
              if element is value:
                  return key
    #+END_SRC

  + Look for all the keys that map the specified element.
    #+BEGIN_SRC python
      def dictfindall(dictionary, element):
          """find all key's value is elemet"""
          res = []
          for (key, value) in iteritems(dictionary):
              if element is value:
                  res.append(key)
          return res
    #+END_SRC

* Misc
  + Limit the execution time of a function.
    #+BEGIN_SRC python
      import sys, threading

      def timelimit(timeout):
          """
          A `decorator` to limit a function to `timeout` seconds, raising `TimeoutError`
          if it takes longer.

          _Caveat:_ The function isn't stopped after `timeout` seconds but continues
          executing in a separate thread. (There seems to be no way to kill a thread.)

          inspired by <http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/473878>
          """
          def _1(function):
              def _2(*args, **kw):
                  class Dispatch(threading.Thread):
                      def __init__(self):
                          threading.Thread.__init__(self)
                          self.result = None
                          self.error = None

                          self.setDaemon(True)
                          self.start()

                      def run(self):
                          try:
                              self.result = function(*args, **kw)
                          except:
                              self.error = sys.exc_info()

                  c = Dispatch()
                  c.join(timeout)
                  if c.isAlive():
                      raise RuntimeError('took too long')
                  if c.error:
                      raise c.error[1]
                  return c.result
              return _2
          return _1
    #+END_SRC
    
    Use like this:
    #+BEGIN_SRC python
      @timelimit(0.1)
      def func():
          while True:
              pass

      func()
    #+END_SRC

  + Simplified conditional judgment.
    #+BEGIN_SRC python
      def cond(predicate, consequence, alternative=None):
          """Function replacement for if-else to use in expressions."""
          if predicate:
              return consequence
          else:
              return alternative
    #+END_SRC

    Use like this:
    #+BEGIN_SRC python
      >>> x = 2
      >>> cond(x % 2 == 0, "even", "odd")
      'even'
      >>> cond(x % 2 == 0, "even", "odd") + '_row'
      'even_row'
    #+END_SRC
    
  + Automatically set instance properties.
    #+BEGIN_SRC python
      def autoassign(self, locals):
          """
          Automatically assigns local variables to `self`.

          Generally used in `__init__` methods, as in:

              def __init__(self, foo, bar, baz=1):
                  autoassign(self, locals())
          """
          for (key, value) in iteritems(locals):
              if key == 'self':
                  continue
              setattr(self, key, value)
    #+END_SRC

  + Programming for stackoverflow.
    #+BEGIN_SRC python
      import functools, webbrowser

      def stackoverflow(func):
          @functools.wraps(func)
          def wrapper(*args, **kwargs):
              try:
                  return func(*args, **kwargs)
              except Exception as e:
                  webbrowser.open('https://stackoverflow.com/search?q=' + str(e))
          return wrapper
    #+END_SRC

  + Printing Lists as Tabular Data.
    #+BEGIN_SRC python
      def tabulate(rows, headers=None, cell_width=15):
          cell_format = '{{:>{0}}}'.format(cell_width)

          if headers is not None:
              header_format = cell_format * len(headers)
              print(header_format.format(*headers))

          for row in rows:
              row_format = cell_format * len(row)
              print(row_format.format(*row))
    #+END_SRC
    
